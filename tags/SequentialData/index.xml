<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SequentialData on</title><link>https://alonelysheep.github.io/quartz-blog/tags/SequentialData/</link><description>Recent content in SequentialData on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://alonelysheep.github.io/quartz-blog/tags/SequentialData/index.xml" rel="self" type="application/rss+xml"/><item><title>D2L-52-读取长序列数据的两种方法</title><link>https://alonelysheep.github.io/quartz-blog/notes/2022/2022.3/D2L-52-%E8%AF%BB%E5%8F%96%E9%95%BF%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate><guid>https://alonelysheep.github.io/quartz-blog/notes/2022/2022.3/D2L-52-%E8%AF%BB%E5%8F%96%E9%95%BF%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</guid><description>读取长序列数据的两种方法 2022-03-08 Tags: #SequentialData #DataPreprocessing
尽管序列数据本质上是连续的, 我们在处理数据的时候也希望将其分为小批量, 方便模型读取。 设我们将使用神经网络来训练语言模型， 模型中的网络一次处理具有预定义长度 （例如n个时间步）的一个小批量序列。 我们应该从上图中选择哪一个序列呢？ 事实上，他们都一样好。 然而，如果我们只选择一个偏移量， 那么用于训练网络的、所有可能的子序列的覆盖范围将是有限的。 因此，我们可以从随机偏移量开始划分序列， 以同时获得覆盖性（coverage）和随机性（randomness）。 下面，我们将描述如何实现随机采样（random sampling）和 顺序分区（sequential partitioning）策略。 随机采样 下图中 Batchsize=2, 也就是说每个Batch里面有两个序列, 一个红色的, 一个蓝色的.</description></item><item><title>D2L-47-序列信息</title><link>https://alonelysheep.github.io/quartz-blog/notes/2022/2022.3/D2L-47-%E5%BA%8F%E5%88%97%E4%BF%A1%E6%81%AF/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://alonelysheep.github.io/quartz-blog/notes/2022/2022.3/D2L-47-%E5%BA%8F%E5%88%97%E4%BF%A1%E6%81%AF/</guid><description>序列信息 2022-03-07 Tags: #SequentialData
数据分布的不同 对于图像或者表格数据， 我们通常都假设所有样本是独立同分布的1。 然而，大多数的数据都有序列性。 例如，文章中的单词是按顺序写的，如果顺序被随机地重排，就很难理解文章原始的意思。 同样，视频中的图像帧、对话中的音频信号以及网站上的浏览行为都是有顺序的。 因此，针对此类数据而设计特定模型，可能效果会更好。 实际情景 在接收一个序列作为输入的时候， 我们通常期望猜测这个序列的后续。 例如预测股市的波动、 患者的体温曲线或者赛车所需的加速度。 我们需要能够处理这些数据的特定模型。 相关模型 如果说卷积神经网络可以有效地处理空间信息， 那么 循环神经网络（recurrent neural network，RNN）则可以更好地处理序列信息。 #todo</description></item><item><title>D2L-48-序列模型-Sequence_Models</title><link>https://alonelysheep.github.io/quartz-blog/notes/2022/2022.3/D2L-48-%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B-Sequence_Models/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://alonelysheep.github.io/quartz-blog/notes/2022/2022.3/D2L-48-%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B-Sequence_Models/</guid><description>序列模型 - Sequence Models 2022-03-07 Tags: #SequenceModel #SequentialData
两种流行的序列模型是自回归模型和隐变量自回归模型 预测问题 假设我们想要根据前 $t-1$ 天的股票价格预测今天的股票价格 $x_t$, 这个问题可以抽象为： $$x_{t} \sim P\left(x_{t} \mid x_{t-1}, \ldots, x_{1}\right)$$</description></item></channel></rss>