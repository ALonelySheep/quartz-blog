<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compiler on</title><link>https://alonelysheep.github.io/quartz-blog/tags/Compiler/</link><description>Recent content in Compiler on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 05 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://alonelysheep.github.io/quartz-blog/tags/Compiler/index.xml" rel="self" type="application/rss+xml"/><item><title>Compiler-4_LR分析</title><link>https://alonelysheep.github.io/quartz-blog/notes/2021/2021.10/Compiler-4_LR%E5%88%86%E6%9E%90/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://alonelysheep.github.io/quartz-blog/notes/2021/2021.10/Compiler-4_LR%E5%88%86%E6%9E%90/</guid><description>LR 分析 2021-11-05 Tags: #Compiler #Course
在自底向上语法分析中, 如何寻找句柄是关键问题 Compiler-4-1_什么是 LR 分析
Compiler-4-2_LR(0)_Parse
Compiler-4-3_SLR_parse
Compiler-4-4_LR(1)_分析</description></item><item><title>Compiler-2_Bottom-Up_Parsing-自底向上分析</title><link>https://alonelysheep.github.io/quartz-blog/notes/2021/2021.10/Compiler-2_Bottom-Up_Parsing-%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E5%88%86%E6%9E%90/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate><guid>https://alonelysheep.github.io/quartz-blog/notes/2021/2021.10/Compiler-2_Bottom-Up_Parsing-%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E5%88%86%E6%9E%90/</guid><description>Bottom-Up Parsing 2021-10-30 Tags: #Compiler #Course
自底向上分析是一种语法分析方法, 它从语法树的下边缘(即一堆终结符)开始, 逐步向上构建这个句子的推导过程
一般来说, 自底向上分析比自上而下分析要更强大, 同时也更复杂.
Shift-reduce parsing1 移位-规约分析(Shift-Reduce Parsing)是自底向上分析的主流方法 有许多不同的移位规约分析方法: 比如: &amp;ldquo;算符优先分析&amp;rdquo;和&amp;quot;LR分析&amp;quot;都属于移位规约分析.</description></item><item><title>Compiler-3_算符优先分析</title><link>https://alonelysheep.github.io/quartz-blog/notes/2021/2021.10/Compiler-3_%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E5%88%86%E6%9E%90/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate><guid>https://alonelysheep.github.io/quartz-blog/notes/2021/2021.10/Compiler-3_%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E5%88%86%E6%9E%90/</guid><description>Operator-precedence grammar 2021-10-30 Tags: #Compiler #Course #FormalLanguage
算符优先文法 算符优先文法(OPG)是一种有特殊性质的上下文无关文法(CFG)
它的特殊性质表现为:
产生式右部不能为空 (即没有 $P\rightarrow \varepsilon$) 产生式右边不能有两个连续的非终结符 (即没有 $P\rightarrow \cdots AB\cdots$) 上述规则使得我们可以定义终结符之间的&amp;quot;优先级&amp;quot;(Precedence), ( 为什么?</description></item></channel></rss>